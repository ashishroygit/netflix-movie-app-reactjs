AWSTemplateFormatVersion: '2010-09-09'
Description: Orion baseline - VPC, Subnets, NAT, ECS cluster, SGs, LogGroup (one-time)
Parameters:
  NamePrefix: { Type: String, Default: orion }
  VpcCidr:    { Type: String, Default: 10.0.0.0/16 }

Resources:
  VPC: { Type: AWS::EC2::VPC, Properties: { CidrBlock: !Ref VpcCidr, EnableDnsHostnames: true, EnableDnsSupport: true, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-vpc'}] } }
  IGW: { Type: AWS::EC2::InternetGateway, Properties: { Tags: [{Key: Name, Value: !Sub '${NamePrefix}-igw'}] } }
  AttachIgw: { Type: AWS::EC2::VPCGatewayAttachment, Properties: { InternetGatewayId: !Ref IGW, VpcId: !Ref VPC } }

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, AvailabilityZone: !Select [0, !GetAZs ''], CidrBlock: 10.0.0.0/24, MapPublicIpOnLaunch: true, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-public-a'}] }
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, AvailabilityZone: !Select [1, !GetAZs ''], CidrBlock: 10.0.1.0/24, MapPublicIpOnLaunch: true, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-public-b'}] }
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, AvailabilityZone: !Select [0, !GetAZs ''], CidrBlock: 10.0.2.0/24, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-private-a'}] }
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties: { VpcId: !Ref VPC, AvailabilityZone: !Select [1, !GetAZs ''], CidrBlock: 10.0.3.0/24, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-private-b'}] }

  NatEipA: { Type: AWS::EC2::EIP, Properties: { Domain: vpc } }
  NatGwA:  { Type: AWS::EC2::NatGateway, Properties: { AllocationId: !GetAtt NatEipA.AllocationId, SubnetId: !Ref PublicSubnetA, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-nat-a'}] } }

  RtPublic:    { Type: AWS::EC2::RouteTable, Properties: { VpcId: !Ref VPC, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-rt-public'}] } }
  RtPrivateA:  { Type: AWS::EC2::RouteTable, Properties: { VpcId: !Ref VPC, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-rt-private-a'}] } }
  RtPrivateB:  { Type: AWS::EC2::RouteTable, Properties: { VpcId: !Ref VPC, Tags: [{Key: Name, Value: !Sub '${NamePrefix}-rt-private-b'}] } }

  RtPublicDefault:   { Type: AWS::EC2::Route, Properties: { RouteTableId: !Ref RtPublic, DestinationCidrBlock: 0.0.0.0/0, GatewayId: !Ref IGW } }
  RtPrivateDefaultA: { Type: AWS::EC2::Route, Properties: { RouteTableId: !Ref RtPrivateA, DestinationCidrBlock: 0.0.0.0/0, NatGatewayId: !Ref NatGwA } }

  AssocPubA:   { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PublicSubnetA,  RouteTableId: !Ref RtPublic } }
  AssocPubB:   { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PublicSubnetB,  RouteTableId: !Ref RtPublic } }
  AssocPrivA:  { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PrivateSubnetA, RouteTableId: !Ref RtPrivateA } }
  AssocPrivB:  { Type: AWS::EC2::SubnetRouteTableAssociation, Properties: { SubnetId: !Ref PrivateSubnetB, RouteTableId: !Ref RtPrivateB } }

  AlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${NamePrefix} ALB SG'
      VpcId: !Ref VPC
      SecurityGroupIngress: [ { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 } ]
      SecurityGroupEgress:  [ { IpProtocol: -1, CidrIp: 0.0.0.0/0 } ]

  ServiceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${NamePrefix} Service SG'
      VpcId: !Ref VPC
      SecurityGroupIngress: [ { IpProtocol: tcp, FromPort: 80, ToPort: 80, SourceSecurityGroupId: !Ref AlbSg } ]
      SecurityGroupEgress:  [ { IpProtocol: -1, CidrIp: 0.0.0.0/0 } ]

  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: { LogGroupName: !Sub '/ecs/${NamePrefix}', RetentionInDays: 14 }

  Cluster:
    Type: AWS::ECS::Cluster
    Properties: { ClusterName: !Sub '${NamePrefix}-cluster' }

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub '${NamePrefix}-VpcId'

  PublicSubnets:
    Value: !Join
      - ","
      - - !Ref PublicSubnetA
        - !Ref PublicSubnetB
    Export:
      Name: !Sub '${NamePrefix}-PublicSubnets'

  PrivateSubnets:
    Value: !Join
      - ","
      - - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
    Export:
      Name: !Sub '${NamePrefix}-PrivateSubnets'

  AlbSg:
    Value: !Ref AlbSg
    Export:
      Name: !Sub '${NamePrefix}-AlbSg'

  ServiceSg:
    Value: !Ref ServiceSg
    Export:
      Name: !Sub '${NamePrefix}-ServiceSg'

  ClusterName:
    Value: !Ref Cluster
    Export:
      Name: !Sub '${NamePrefix}-ClusterName'

  LogGroup:
    Value: !Ref AppLogGroup
    Export:
      Name: !Sub '${NamePrefix}-LogGroup'
