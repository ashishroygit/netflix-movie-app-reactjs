name: CD
on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

concurrency:
  group: cd-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  deploy:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      (github.event.workflow_run.head_branch == 'dev' || github.event.workflow_run.head_branch == 'main')
    runs-on: ubuntu-latest
    permissions:
      id-token: write     # OIDC for AWS
      contents: read

    # branch -> environment
    environment: ${{ github.event.workflow_run.head_branch == 'main' && 'production' || 'staging' }}

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      NAME_PREFIX: orion
      BASELINE_STACK: orion-baseline
      APP_STACK: orion-app
      ECR_REPO: orion

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # ---- 1) Ensure baseline exists/updated (idempotent) ----
      - name: Deploy/Update baseline (VPC, subnets, ECS, SGs, logs)
        run: |
          aws cloudformation deploy \
            --stack-name ${BASELINE_STACK} \
            --template-file infra/baseline.yaml \
            --parameter-overrides NamePrefix=${NAME_PREFIX} \
            --capabilities CAPABILITY_NAMED_IAM

      # ---- 2) Get the build output from CI ----
      - name: Download CI build artifact (dist/)
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: dist/
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # ---- 3) Build & push NGINX image serving dist/ ----
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPO} >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name ${ECR_REPO} --image-scanning-configuration scanOnPush=true

      - name: Build & push runtime image (from dist/)
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_TAG=sha-${{ github.event.workflow_run.head_sha }}
          IMAGE_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"

          docker build -t ${ECR_REPO}:${IMAGE_TAG} -f Dockerfile .
          docker tag ${ECR_REPO}:${IMAGE_TAG} ${IMAGE_URI}
          docker push ${IMAGE_URI}
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

      # ---- 4) Deploy/Update the app stack (ALB + ECS Service) ----
      - name: Deploy app stack (ECS/ALB)
        run: |
          aws cloudformation deploy \
            --stack-name ${APP_STACK} \
            --template-file infra/app-stack.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              NamePrefix=${NAME_PREFIX} \
              ImageUri=${IMAGE_URI} \
              DesiredCount=${{ github.event.workflow_run.head_branch == 'main' && '2' || '1' }} \
              Cpu=256 Memory=512

      # ---- 5) Smoke test ----
      - name: Smoke test /health
        run: |
          APP_URL=$(aws cloudformation describe-stacks --stack-name ${APP_STACK} \
            --query "Stacks[0].Outputs[?OutputKey=='AppUrl'].OutputValue" --output text)
          echo "App URL: ${APP_URL}"
          curl -fsS ${APP_URL}/health
